gamma1 <- cov(y[2:T],y[1:(T-1)])
gamma2 <- cov(y[3:T],y[1:(T-2)])
gamma3 <- cov(y[4:T],y[1:(T-3)])
s2.lr  <- gamma0 + 2*(gamma1 + gamma2 + gamma3)
se <- sqrt(s2.lr/T)
z.score[s] <- m/se
}
cat('\n')
z.size <- mean( z.score > crit )
par( mar=c(2,2,0.75,0.75) , yaxs='i' )
hist(z.score,50,freq=FALSE,ylim=c(0,0.5),xlim=c(-8,8),col='azure2',main='')
lines( seq(-4,4,0.1) , dnorm(seq(-4,4,0.1)) , col='darkblue' , lwd=3 , t='l',ylim=c(0,0.5),xlim=c(-8,8) )
polygon( c(crit,crit,10,10) , c(0,0.5,0.5,0) ,col='coral2' , density=10)
abline( v=qnorm(0.95) , col='firebrick3' , lwd=4)
text(qnorm(0.95),0.25,sprintf('Nominal 5%% Rejection Region:\nSize %2.2f%%',z.size*100),col='black',pos=4)
box()
z.score <- rep(0,S)
for( s in 1:S ){
cat('.')
eps <- rnorm(T)
y   <- rep(0,T)
for( t in 4:T ){
y[t] <- eps[t] + w[1]*eps[t-1] + w[2]*eps[t-2] + w[3]*eps[t-3]
}
m  <- mean(y)
gamma0 <- var(y)
gamma1 <- cov(y[2:T],y[1:(T-1)])
gamma2 <- cov(y[3:T],y[1:(T-2)])
gamma3 <- cov(y[4:T],y[1:(T-3)])
s2.lr  <- gamma0 + 2*(gamma1 + gamma2 + gamma3)
se <- sqrt(s2.lr/T)
z.score[s] <- m/se
}
cat('\n')
z.size <- mean( z.score > crit )
par( mar=c(2,2,0.75,0.75) , yaxs='i' )
hist(z.score,50,freq=FALSE,ylim=c(0,0.5),xlim=c(-8,8),col='azure2',main='')
lines( seq(-4,4,0.1) , dnorm(seq(-4,4,0.1)) , col='darkblue' , lwd=3 , t='l',ylim=c(0,0.5),xlim=c(-8,8) )
polygon( c(crit,crit,10,10) , c(0,0.5,0.5,0) ,col='coral2' , density=10)
abline( v=qnorm(0.95) , col='firebrick3' , lwd=4)
text(qnorm(0.95),0.25,sprintf('Nominal 5%% Rejection Region:\nSize %2.2f%%',z.size*100),col='black',pos=4)
box()
rm(list=ls())
set.seed(42)
S <- 10000
T <- 500
crit <- qnorm(0.95)
w   <- c(-0.4, -0.3, 0.2)
eps <- rnorm(T)
y   <- rep(0,T)
for( t in 4:T ){
y[t] <- eps[t] + w[1]*eps[t-1] + w[2]*eps[t-2] + w[3]*eps[t-3]
}
m      <- mean(y)
s2     <- var(y)
se.iid <- sqrt(s2/T)
gamma0 <- var(y)
gamma1 <- cov(y[2:T],y[1:(T-1)])
gamma2 <- cov(y[3:T],y[1:(T-2)])
gamma3 <- cov(y[4:T],y[1:(T-3)])
s2.lr  <- gamma0 + 2*(gamma1 + gamma2 + gamma3)
se.ts  <- sqrt(s2.lr/T)
t1 <- m/se.iid
t2 <- m/se.ts
par( mar=c(2,2,0.75,0.75) , yaxs='i' )
plot( seq(-4,4,0.1) , dnorm(seq(-4,4,0.1)) , col='darkblue' , lwd=3 , t='l',ylim=c(0,0.5),xlim=c(-8,8) )
polygon( c(crit,crit,10,10) , c(0,0.5,0.5,0) ,col='coral2' , density=10)
abline( v=qnorm(0.95) , col='firebrick3' , lwd=4)
text(crit,0.25,sprintf('Nominal 5%% Rejection Region'),col='black',pos=4)
box()
z.score <- rep(0,S)
for( s in 1:S ){
cat('.')
eps <- rnorm(T)
y   <- rep(0,T)
for( t in 4:T ){
y[t] <- eps[t] + w[1]*eps[t-1] + w[2]*eps[t-2] + w[3]*eps[t-3]
}
m  <- mean(y)
s2 <- var(y)
se <- sqrt(s2/T)
z.score[s] <- m/se
}
cat('\n')
z.size <- mean( z.score > crit )
# histogram
par( mar=c(2,2,0.75,0.75) , yaxs='i' )
hist(z.score,50,freq=FALSE,ylim=c(0,0.5),xlim=c(-8,8),col='azure2',main='')
lines( seq(-4,4,0.1) , dnorm(seq(-4,4,0.1)) , col='darkblue' , lwd=3 , t='l',ylim=c(0,0.5),xlim=c(-8,8) )
polygon( c(crit,crit,10,10) , c(0,0.5,0.5,0) ,col='coral2' , density=10)
abline( v=qnorm(0.95) , col='firebrick3' , lwd=4)
text(qnorm(0.95),0.25,sprintf('Nominal 5%% Rejection Region:\nSize %2.2f%%',z.size*100),col='black',pos=4)
box()
z.score <- rep(0,S)
for( s in 1:S ){
cat('.')
eps <- rnorm(T)
y   <- rep(0,T)
for( t in 4:T ){
y[t] <- eps[t] + w[1]*eps[t-1] + w[2]*eps[t-2] + w[3]*eps[t-3]
}
m  <- mean(y)
gamma0 <- var(y)
gamma1 <- cov(y[2:T],y[1:(T-1)])
gamma2 <- cov(y[3:T],y[1:(T-2)])
gamma3 <- cov(y[4:T],y[1:(T-3)])
s2.lr  <- gamma0 + 2*(gamma1 + gamma2 + gamma3)
se <- sqrt(s2.lr/T)
z.score[s] <- m/se
}
cat('\n')
z.size <- mean( z.score > crit )
par( mar=c(2,2,0.75,0.75) , yaxs='i' )
hist(z.score,50,freq=FALSE,ylim=c(0,0.5),xlim=c(-8,8),col='azure2',main='')
lines( seq(-4,4,0.1) , dnorm(seq(-4,4,0.1)) , col='darkblue' , lwd=3 , t='l',ylim=c(0,0.5),xlim=c(-8,8) )
polygon( c(crit,crit,10,10) , c(0,0.5,0.5,0) ,col='coral2' , density=10)
abline( v=qnorm(0.95) , col='firebrick3' , lwd=4)
text(qnorm(0.95),0.25,sprintf('Nominal 5%% Rejection Region:\nSize %2.2f%%',z.size*100),col='black',pos=4)
box()
rm(list=ls())
set.seed(42)
S <- 10000
T <- 500
crit <- qnorm(0.95)
w   <- c(0.4, 0.3, 0.2)
eps <- rnorm(T)
y   <- rep(0,T)
for( t in 4:T ){
y[t] <- eps[t] + w[1]*eps[t-1] + w[2]*eps[t-2] + w[3]*eps[t-3]
}
m      <- mean(y)
s2     <- var(y)
se.iid <- sqrt(s2/T)
gamma0 <- var(y)
gamma1 <- cov(y[2:T],y[1:(T-1)])
gamma2 <- cov(y[3:T],y[1:(T-2)])
gamma3 <- cov(y[4:T],y[1:(T-3)])
s2.lr  <- gamma0 + 2*(gamma1 + gamma2 + gamma3)
se.ts  <- sqrt(s2.lr/T)
t1 <- m/se.iid
t2 <- m/se.ts
par( mar=c(2,2,0.75,0.75) , yaxs='i' )
plot( seq(-4,4,0.1) , dnorm(seq(-4,4,0.1)) , col='darkblue' , lwd=3 , t='l',ylim=c(0,0.5),xlim=c(-8,8) )
polygon( c(crit,crit,10,10) , c(0,0.5,0.5,0) ,col='coral2' , density=10)
abline( v=qnorm(0.95) , col='firebrick3' , lwd=4)
text(crit,0.25,sprintf('Nominal 5%% Rejection Region'),col='black',pos=4)
box()
z.score <- rep(0,S)
for( s in 1:S ){
cat('.')
eps <- rnorm(T)
y   <- rep(0,T)
for( t in 4:T ){
y[t] <- eps[t] + w[1]*eps[t-1] + w[2]*eps[t-2] + w[3]*eps[t-3]
}
m  <- mean(y)
s2 <- var(y)
se <- sqrt(s2/T)
z.score[s] <- m/se
}
cat('\n')
z.size <- mean( z.score > crit )
# histogram
par( mar=c(2,2,0.75,0.75) , yaxs='i' )
hist(z.score,50,freq=FALSE,ylim=c(0,0.5),xlim=c(-8,8),col='azure2',main='')
lines( seq(-4,4,0.1) , dnorm(seq(-4,4,0.1)) , col='darkblue' , lwd=3 , t='l',ylim=c(0,0.5),xlim=c(-8,8) )
polygon( c(crit,crit,10,10) , c(0,0.5,0.5,0) ,col='coral2' , density=10)
abline( v=qnorm(0.95) , col='firebrick3' , lwd=4)
text(qnorm(0.95),0.25,sprintf('Nominal 5%% Rejection Region:\nSize %2.2f%%',z.size*100),col='black',pos=4)
box()
z.score <- rep(0,S)
for( s in 1:S ){
cat('.')
eps <- rnorm(T)
y   <- rep(0,T)
for( t in 4:T ){
y[t] <- eps[t] + w[1]*eps[t-1] + w[2]*eps[t-2] + w[3]*eps[t-3]
}
m  <- mean(y)
gamma0 <- var(y)
gamma1 <- cov(y[2:T],y[1:(T-1)])
gamma2 <- cov(y[3:T],y[1:(T-2)])
gamma3 <- cov(y[4:T],y[1:(T-3)])
s2.lr  <- gamma0 + 2*(gamma1 + gamma2 + gamma3)
se <- sqrt(s2.lr/T)
z.score[s] <- m/se
}
cat('\n')
z.size <- mean( z.score > crit )
par( mar=c(2,2,0.75,0.75) , yaxs='i' )
hist(z.score,50,freq=FALSE,ylim=c(0,0.5),xlim=c(-8,8),col='azure2',main='')
lines( seq(-4,4,0.1) , dnorm(seq(-4,4,0.1)) , col='darkblue' , lwd=3 , t='l',ylim=c(0,0.5),xlim=c(-8,8) )
polygon( c(crit,crit,10,10) , c(0,0.5,0.5,0) ,col='coral2' , density=10)
abline( v=qnorm(0.95) , col='firebrick3' , lwd=4)
text(qnorm(0.95),0.25,sprintf('Nominal 5%% Rejection Region:\nSize %2.2f%%',z.size*100),col='black',pos=4)
box()
qnorm(0.95)
qnorm(0.95)
qnorm(0.95)
qnorm(0.95)
qnorm(0.95)
qnorm(0.95)
w
rnorm(T)
y
rep(0,T)
eps <- rnorm(T)
y   <- rep(0,T)
for( t in 4:T ){
y[t] <- eps[t] + w[1]*eps[t-1] + w[2]*eps[t-2] + w[3]*eps[t-3]
}
m      <- mean(y)
s2     <- var(y)
se.iid <- sqrt(s2/T)
gamma0 <- var(y)
gamma1 <- cov(y[2:T],y[1:(T-1)])
gamma2 <- cov(y[3:T],y[1:(T-2)])
gamma3 <- cov(y[4:T],y[1:(T-3)])
s2.lr  <- gamma0 + 2*(gamma1 + gamma2 + gamma3)
se.ts  <- sqrt(s2.lr/T)
t1 <- m/se.iid
t2 <- m/se.ts
par( mar=c(2,2,0.75,0.75) , yaxs='i' )
plot( seq(-4,4,0.1) , dnorm(seq(-4,4,0.1)) , col='darkblue' , lwd=3 , t='l',ylim=c(0,0.5),xlim=c(-8,8) )
polygon( c(crit,crit,10,10) , c(0,0.5,0.5,0) ,col='coral2' , density=10)
abline( v=qnorm(0.95) , col='firebrick3' , lwd=4)
text(crit,0.25,sprintf('Nominal 5%% Rejection Region'),col='black',pos=4)
box()
z.score <- rep(0,S)
for( s in 1:S ){
cat('.')
eps <- rnorm(T)
y   <- rep(0,T)
for( t in 4:T ){
y[t] <- eps[t] + w[1]*eps[t-1] + w[2]*eps[t-2] + w[3]*eps[t-3]
}
m  <- mean(y)
s2 <- var(y)
se <- sqrt(s2/T)
z.score[s] <- m/se
}
cat('\n')
z.size <- mean( z.score > crit )
# histogram
par( mar=c(2,2,0.75,0.75) , yaxs='i' )
hist(z.score,50,freq=FALSE,ylim=c(0,0.5),xlim=c(-8,8),col='azure2',main='')
lines( seq(-4,4,0.1) , dnorm(seq(-4,4,0.1)) , col='darkblue' , lwd=3 , t='l',ylim=c(0,0.5),xlim=c(-8,8) )
polygon( c(crit,crit,10,10) , c(0,0.5,0.5,0) ,col='coral2' , density=10)
abline( v=qnorm(0.95) , col='firebrick3' , lwd=4)
text(qnorm(0.95),0.25,sprintf('Nominal 5%% Rejection Region:\nSize %2.2f%%',z.size*100),col='black',pos=4)
box()
-40 + 0.6 * -72 + 0.4 * -52
0.6 * -72
0.4 * -52
-40 + 0.3 * -72 + 0.7 * -52
-20 + 0.6 * -72 + 0.4 * -52
-40 + 0.6 * -104 + 0.4 * -84
-30 + 0.3 * -104 + 0.7 * -84
install.packages(c("parallel","e1071"))
require("parallel")
require("parallel")
require("e1071")
require("parallel")
require("e1071")
n <- 20
means <- rnorm(n=n,mean=10.5,sd=0.2)
races <- 10
matrix <- matrix(c(rep(0,races*n)),nrow=n)
for(i in 1:n){
for(j in 1:races){
matrix[i,j]<-rnorm(1,means[i],0.2)
}}
colnames(matrix)<-paste0("Race",1:races)
rownames(matrix)<-paste0("Runner",1:n)
matrix<-round(matrix,3)
n<-20
means<-rnorm(n=n,mean=10.5,sd=0.2)
races<-10
matrixNA<-matrix(c(rep(0,races*n)),nrow=n)
for(i in 1:n){
for(j in 1:races){
matrixNA[i,j]<-ifelse(runif(1)<0.2,NA,rnorm(1,means[i],0.1))
}}
colnames(matrixNA)<-paste0("Race",1:races)
rownames(matrixNA)<-paste0("Runner",1:n)
matrixNA<-round(matrixNA,3)
apply(X = matrix, MARGIN = 2, FUN = mean)
matrix[:1]
matrix[,1]
which.min(matrix[,1])
which.min(matrix[,2])
matrix[,1][which.min(matrix[,2])]
order[matrix[,1]]
order(matrix[,1])
order(matrix[1,])
matrix[order(matrix[1,])]
matrix[order(matrix)]
View(matrix)
library(ggplot2)
positions <- data.frame(x <- c(0, 0, 2, 2), y <- c(1, 3, 7/3, 0))
p <- ggplot(data = data.frame(x = 0), aes(x)) +
geom_polygon(data = positions, aes(x, y), fill = 'goldenrod1', alpha = 0.8) +
annotate("text", x = 1, y = 1.6, label = 'Feasible Region', color = 'goldenrod4') +
stat_function(fun = function(x) {(-1/3 * x + 3)}, aes(color = "Upper Constraint")) +
stat_function(fun = function(x) {(1/2 * x - 3/2) }, aes(color = "Lower Constraint")) +
geom_vline(aes(xintercept = 2, color = "Upper Constraint")) +
stat_function(fun = function(x) {(-1/2 * x + 1) }, aes(color = "Lower Constraint")) +
stat_function(fun = function(x) {(0) }, aes(color = "Lower Constraint")) +
geom_vline(aes(xintercept = 0, color = "Lower Constraint")) +
stat_function(fun = function(x) {(13/3 - x) }, aes(color = "Objective function"),
linetype = 'dashed') +
stat_function(fun = function(x) {(10/3 - x) }, aes(color = "Objective function"),
linetype = 'dashed', alpha = 0.2) +
stat_function(fun = function(x) {(7/3 - x) }, aes(color = "Objective function"),
linetype = 'dashed', alpha = 0.2) +
stat_function(fun = function(x) {(16/3 - x) }, aes(color = "Objective function"),
linetype = 'dashed', alpha = 0.2) +
scale_x_continuous(limits = c(-0.5, 5)) + scale_y_continuous(limits = c(-2, 5)) +
xlab('y1') + ylab('y2') + theme_bw() +
geom_point(aes(x = 2, y = 7/3), size = 3, color = 'red3') +
annotate("text", x = 3.3, y = 8/3, label = 'Optimal solution at (2, 7/3)', color = 'red3') +
scale_color_manual(values = c("Lower Constraint" = "darkgreen", "Upper Constraint" = "darkmagenta",
'Objective function' = 'red3'))
p
m <- matrix(8, 8)
m <- matrix(8, 8, 0)
m <- matrix(0, 8, 8)
View(m)
colnames(m) <- c('1', '2', "3", '4', '5', 't', 'z', 'o')
View(m)
cc <- c('VZ', 'CH', 'TR', 'SK', 'ES', 'GB', 'CN', 'GT', 'DE', 'IT', 'GR', 'HU', 'CO')
n <- length(countries)
countries <- c('Venezuela', 'Switzerland', 'Turkey', 'Slovakia', 'Spain', 'UK', 'China',
'Guatemala', 'Germany', 'Italy', 'Greece', 'Hungary', 'Colombia')
cc <- c('VZ', 'CH', 'TR', 'SK', 'ES', 'GB', 'CN', 'GT', 'DE', 'IT', 'GR', 'HU', 'CO')
n <- length(countries)
n
m <- matrix(0, n, n)
colnames(m) <- cc
rownames(m) <- countries
View(m)
runif(100)
sample(1:10, 1)
sample(1:10, 10)
sample(1:10, 10)
m <- Matrix(sample(1:10, n), n)
m <- matrix(sample(1:10, n), n)
m <- matrix(sample(1:10, n), n, n)
matrix(rexp(200, rate=.1), ncol=20)
matrix(rexp(200, rate=.1), ncol = n)
matrix(rexp(n, rate=.1), ncol = n)
t = matrix(rexp(n, rate=.1), ncol = n)
View(t)
t = matrix(rexp(n * n, rate=.1), ncol = n)
View(t)
t = matrix(sample(1:10, 10), ncol = n)
t = matrix(sample(1:10, n), ncol = n)
t = matrix(sample(1:10, n * n), ncol = n)
sample(1:10, 10)
sample(1:10, n)
sample(1:10, 15)
floor(runif(1000, 1,101))
floor(runif(10, 1,10))
floor(3)
floor(3.5)
floor(runif(10, 1, n))
floor(runif(10, 1, n * n))
floor(runif(n * n, 1, 10))
values <- floor(runif(n * n, 1, 10))
t = matrix(values, ncol = n)
t
X <- forceSymmetric(t)
library(Matrix)
X <- forceSymmetric(t)
library(Matrix)
countries <- c('Venezuela', 'Switzerland', 'Turkey', 'Slovakia', 'Spain', 'UK', 'China',
'Guatemala', 'Germany', 'Italy', 'Greece', 'Hungary', 'Colombia')
cc <- c('VZ', 'CH', 'TR', 'SK', 'ES', 'GB', 'CN', 'GT', 'DE', 'IT', 'GR', 'HU', 'CO')
n <- length(countries)
colnames(m) <- cc
rownames(m) <- countries
m <- matrix(sample(1:10, n), n, n)
values <- floor(runif(n * n, 1, 10))
t <- matrix(values, ncol = n * n)
m <- forceSymmetric(t)
library(Matrix)
countries <- c('Venezuela', 'Switzerland', 'Turkey', 'Slovakia', 'Spain', 'UK', 'China',
'Guatemala', 'Germany', 'Italy', 'Greece', 'Hungary', 'Colombia')
cc <- c('VZ', 'CH', 'TR', 'SK', 'ES', 'GB', 'CN', 'GT', 'DE', 'IT', 'GR', 'HU', 'CO')
n <- length(countries)
colnames(m) <- cc
rownames(m) <- countries
m <- matrix(sample(1:10, n), n, n)
values <- floor(runif(n * n, 1, 10))
t <- matrix(values, ncol = n * n)
m <- forceSymmetric(t)
library(Matrix)
countries <- c('Venezuela', 'Switzerland', 'Turkey', 'Slovakia', 'Spain', 'UK', 'China',
'Guatemala', 'Germany', 'Italy', 'Greece', 'Hungary', 'Colombia')
cc <- c('VZ', 'CH', 'TR', 'SK', 'ES', 'GB', 'CN', 'GT', 'DE', 'IT', 'GR', 'HU', 'CO')
n <- length(countries)
values <- floor(runif(n * n, 1, 10))
values
t <- matrix(values, ncol = n * n)
m <- forceSymmetric(t)
t
t <- matrix(values, ncol = n)
m <- forceSymmetric(t)
colnames(m) <- cc
rownames(m) <- countries
View(m)
View(m)
n <- length(countries)
values <- floor(runif(n * n, 1, 10))
t <- matrix(values, ncol = n)
colnames(m) <- cc
rownames(m) <- countries
small <- matrix(rep(0, n * n), nrow = n)
seq(from = 1, to = choose(10,2), by = 1)
seq(from = 1, to = choose(10,2), by = 1)
small[lower.tri(small)] <- floor(runif(n, 1, 10))
floor(runif(n, 1, 10))
choose(10,2)
choose(n, 2)
small[lower.tri(small)] <- floor(runif(choose(n, 2), 1, 10))
small[upper.tri(small)] <- floor(runif(choose(n, 2), 1, 10))
small
View(small)
13 * 13
169 / 2
169 - 13
156 / 2
library(Matrix)
countries <- c('Venezuela', 'Switzerland', 'Turkey', 'Slovakia', 'Spain', 'UK', 'China',
'Guatemala', 'Germany', 'Italy', 'Greece', 'Hungary', 'Colombia')
cc <- c('VZ', 'CH', 'TR', 'SK', 'ES', 'GB', 'CN', 'GT', 'DE', 'IT', 'GR', 'HU', 'CO')
n <- length(countries)
values <- floor(runif(choose(n, 2), 1, 10))
m <- matrix(rep(0, n * n), nrow = n)
m[lower.tri(m)] <- values
m[upper.tri(m)] <- values
colnames(m) <- cc
rownames(m) <- countries
library(Matrix)
countries <- c('Venezuela', 'Switzerland', 'Turkey', 'Slovakia', 'Spain', 'UK', 'China',
'Guatemala', 'Germany', 'Italy', 'Greece', 'Hungary', 'Colombia')
cc <- c('VZ', 'CH', 'TR', 'SK', 'ES', 'GB', 'CN', 'GT', 'DE', 'IT', 'GR', 'HU', 'CO')
n <- length(countries)
values <- floor(runif(choose(n, 2), 1, 10))
m <- matrix(rep(0, n * n), nrow = n)
m[lower.tri(m)] <- values
m[upper.tri(m)] <- values
colnames(m) <- cc
rownames(m) <- countries
View(m)
rm(list = ls())
rm(list = ls())
setwd('/home/laurits/Desktop/BGSE/Term 2/Stochastic Models and Optimization/Final Project/SMO')
library(ggplot2)
library(ggthemes)
library(reshape2)
library(dplyr)
htest = read.csv('csv_files/htest-05gamma.csv')
sp500_weekly <- read.csv('csv_files/sp500weekly.csv')
finalwealth <- read.csv('csv_files/finalwealthar-05gamma.csv')
htest = read.csv('csv_files/htest5.csv')
company_list = c('Amazon', 'Bank of New York', 'Barclays', 'Coca Cola', 'lowe‘s Companies',
'Nike', 'Norfolk Southern Railway', 'State Street Corporation', 'Walmart')
colnames(htest) = c('index', 'Riskless asset', company_list)
wealth_test <- htest
wealth <- rowSums(wealth_test[c('Riskless asset', company_list)])
sp500_weekly <- read.csv('csv_files/sp500weekly.csv')
sp500_weekly$returns <- 1 + (sp500_weekly$Close - lag(sp500_weekly$Close)) / sp500_weekly$Close
sp500_weekly <- sp500_weekly[(nrow(sp500_weekly)-156) : nrow(sp500_weekly),]
returns <- sp500_weekly$returns
dates <- as.Date(as.character(sp500_weekly$Date),'%Y-%m-%d')
wealth_sp500 <- rep(1000, length(returns))
for (i in (1 : (length(returns)-1))) {
wealth_sp500[i+1] <- wealth_sp500[i] * returns[i]
}
diff <- wealth - wealth_sp500
sp500_comparison <- data.frame(dates, diff)
finalwealth <- read.csv('csv_files/finalwealthar5.csv')
colnames(finalwealth) <- c('index', 'wealth')
ggplot(finalwealth, aes(x = index, y = wealth)) +
geom_line(color = 'navy', size = 0.5) + geom_smooth(span = 0.3, color = 'red') +
ggtitle('Final wealth of the training process') +
xlab('Training period') + ylab('Wealth in USD') +
theme(axis.text = element_text(size = 20), axis.title = element_text(size = 20),
plot.title = element_text(size = 24, hjust = 0.5),
legend.position = 'right',
legend.title = element_text(size = 22),
legend.text = element_text(size = 20), strip.text = element_text(size = 20),
legend.box.background = element_rect(colour = 'white'),
legend.key = element_blank(),
legend.key.size = unit(2, 'line'))
ggsave('plots/finalwealth5.png', width = 16, height = 9)
V_optimize <- read.csv('csv_files/V_optimization5.csv')
colnames(V_optimize) <- c('index', 'V_opt')
ggplot(V_optimize, aes(x = index, y = V_opt)) +
geom_line(color = 'navy', size = 0.5) + geom_smooth(color = 'red', span = 0.3) +
ggtitle('Final wealth of the training process') +
xlab('Training period') + ylab('Wealth in USD') +
theme(axis.text = element_text(size = 20), axis.title = element_text(size = 20),
plot.title = element_text(size = 24, hjust = 0.5),
legend.position = 'right',
legend.title = element_text(size = 22),
legend.text = element_text(size = 20), strip.text = element_text(size = 20),
legend.box.background = element_rect(colour = 'white'),
legend.key = element_blank(),
legend.key.size = unit(2, 'line'))
ggsave('plots/V_optimize5.png', width = 16, height = 9)
